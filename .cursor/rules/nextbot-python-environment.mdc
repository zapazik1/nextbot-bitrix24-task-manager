---
description: 
globs: *.py
alwaysApply: false
---
### Правила и ограничения Python-окружения NextBot

Этот документ описывает ключевые правила, ограничения и особенности среды выполнения Python на платформе NextBot. Строгое следование этим правилам необходимо для избежания критических ошибок во время выполнения скриптов.

#### 1. Управление зависимостями и импортами

-   **Запрет на `import`**: Все доступные модули (`requests`, `re`, `datetime`, `json`, `math` и др., как указано в `example_nextbot_function.py`) уже загружены в глобальную область видимости. **Не используйте** операторы `import` ни для каких библиотек. Их наличие приведет к ошибке.

#### 2. Особенности синтаксиса Python

-   **Запрет на распаковку последовательностей**: Критическая ошибка `name '_unpack_sequence_' is not defined` возникает при попытке распаковки кортежей, списков или результатов функций (например, `split()`).
    -   **Неправильно**: `a, b = "значение1,значение2".split(',')`
    -   **Правильно**: `parts = "значение1,значение2".split(','); a = parts[0]; b = parts[1]`

-   **Запрет на имена функций с `_`**: Линтер платформы не допускает именования функций, начинающихся с символа нижнего подчеркивания (`_`). Это относится к созданию "внутренних" или "приватных" хелперов.
    -   **Неправильно**: `def _helper_function(): ...`
    -   **Правильно**: `def helper_function(): ...`

#### 3. Работа с датой и временем (модуль `datetime`)

Модуль `datetime` имеет серьезные ограничения и работает нестабильно.

-   **Методы `strptime` и `strftime` не работают**: Попытка их использования вызывает ошибку `__import__`.
    -   **Решение**: Для парсинга дат (например, "ДД.ММ.ГГГГ") используйте `split('.')` и ручное преобразование в `int`. Для форматирования дат в строку используйте f-strings, например: `f"{dt.year}-{dt.month:02d}-{dt.day:02d}"`.
-   **Модуль `dateutil` недоступен**: Несмотря на возможное упоминание в документации, его использование вызывает ошибку `name 'dateutil' is not defined`.
-   **Нестабильный формат `args["dateUonUseFunction"]`**: Это системное поле может приходить как `int` (Unix timestamp), так и `str` ("YYYY-MM-DD HH:MM:SS"). Всегда проверяйте тип данных с помощью `isinstance()` перед использованием, чтобы избежать ошибок.

#### 4. Структура скрипта

-   **Итоговая переменная `result`**: Результат работы вашей функции **обязательно** должен быть присвоен переменной с именем `result` в конце скрипта. Платформа ожидает найти результат именно в ней.
    -   **Пример**: `result = main(args)`

-   **Логирование**: Для отладки используйте встроенную функцию `debug()`.
    -   **Пример**: `debug(f"Получены аргументы: {args}")`

