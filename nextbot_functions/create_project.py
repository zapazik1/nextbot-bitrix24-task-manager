
def get_webhook_from_sheet(sheet_url, user_name):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤–µ–±—Ö—É–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π Google –¢–∞–±–ª–∏—Ü—ã CSV.
    –§–æ—Ä–º–∞—Ç —Ç–∞–±–ª–∏—Ü—ã: A - –ò–º—è, B - –í–µ–±—Ö—É–∫.
    """
    debug(f"-> get_webhook_from_sheet: –∏—â–µ–º –≤–µ–±—Ö—É–∫ –¥–ª—è '{user_name}'")
    try:
        response = requests.get(sheet_url, timeout=5)
        response.raise_for_status()
        csv_data = response.text
        lines = csv_data.strip().splitlines()

        for line in lines:
            if not line.strip(): continue
            parts = line.strip().split(',')
            if len(parts) >= 2:
                sheet_user = parts[0].strip()
                webhook = parts[1].strip()
                webhook = ''.join(c for c in webhook if c.isprintable())
                
                if sheet_user == user_name:
                    debug(f"<- get_webhook_from_sheet: –í–µ–±—Ö—É–∫ –¥–ª—è '{user_name}' –Ω–∞–π–¥–µ–Ω.")
                    if not webhook.endswith('/'): webhook += '/'
                    return webhook
        
        debug(f"<- get_webhook_from_sheet: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_name}' –ù–ï –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ.")
        return None
    except Exception as e:
        debug(f"<- get_webhook_from_sheet: –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ Google Sheets: {e}")
        return None

def get_current_user_id(webhook_url):
    """–ü–æ–ª—É—á–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–µ–±—Ö—É–∫."""
    debug("-> get_current_user_id: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    url = f"{webhook_url}user.current.json"
    try:
        response = requests.post(url, timeout=5)
        response.raise_for_status()
        result = response.json().get("result", {})
        user_id = result.get("ID")
        if user_id:
            debug(f"<- get_current_user_id: ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
            return int(user_id)
        else:
            debug("<- get_current_user_id: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∏–∑ –æ—Ç–≤–µ—Ç–∞.")
            return None
    except Exception as e:
        debug(f"<- get_current_user_id: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None

def find_user_ids_by_names(webhook_url, names):
    """–ù–∞—Ö–æ–¥–∏—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏—Ö –∏–º–µ–Ω–∞–º."""
    debug(f"-> find_user_ids_by_names: –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {names}")
    if not names:
        return []
    
    url = f"{webhook_url}user.get.json"
    try:
        response = requests.post(url, timeout=5)
        response.raise_for_status()
        users = response.json().get("result", [])
        
        found_ids = []
        for name in names:
            name_lower = name.lower()
            for user in users:
                if (name_lower in user.get("NAME", "").lower() or 
                    name_lower in user.get("LAST_NAME", "").lower() or 
                    name_lower in user.get("SECOND_NAME", "").lower()):
                    found_ids.append(int(user["ID"]))
                    break
        
        debug(f"<- find_user_ids_by_names: –Ω–∞–π–¥–µ–Ω—ã ID: {found_ids}")
        return found_ids
    except Exception as e:
        debug(f"<- find_user_ids_by_names: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []

def create_b24_project(webhook_url, fields):
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç –≤ Bitrix24 –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ ID –∏ —Å—Å—ã–ª–∫—É."""
    debug(f"-> create_b24_project: —Å –ø–æ–ª—è–º–∏ {fields}")
    url = f"{webhook_url}sonet_group.create.json"
    params = {"fields": fields}
    try:
        response = requests.post(url, json=params)
        response.raise_for_status()
        result_json = response.json()
        if "result" in result_json:
            project_id = result_json["result"]
            if project_id:
                portal_url = webhook_url.split('/rest/')[0]
                project_link = f"{portal_url}/workgroups/group/{project_id}/"
                debug(f"<- create_b24_project: –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω, ID: {project_id}, —Å—Å—ã–ª–∫–∞: {project_link}")
                return project_id, project_link
    except Exception as e:
        debug(f"<- create_b24_project: –û–®–ò–ë–ö–ê API: {e}")
        debug(f"–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
    
    debug("<- create_b24_project: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, None")
    return None, None

def main(args):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞."""
    debug("--- –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ create_project ---")
    debug(f"–ü–æ–ª—É—á–µ–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã –æ—Ç NextBot: {args}")

    GSHEET_URL = "https://docs.google.com/spreadsheets/d/YOUR_SHEET_ID/pub?gid=0&single=true&output=csv"
    user_name = args.get("nameUser")
    if not user_name:
        return {"result": "error", "message": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ –±—ã–ª–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (nameUser)."}

    webhook_url = get_webhook_from_sheet(GSHEET_URL, user_name)
    if not webhook_url:
        msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–µ–±—Ö—É–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{user_name}'. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–Ω–µ—Å–µ–Ω—ã –≤ –±–∞–∑—É."
        return {"result": "error", "message": msg}

    project_name = args.get("name")
    directors = args.get("directors", [])
    team = args.get("team", [])

    if not project_name:
        return {"result": "error", "message": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞."}

    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    current_user_id = get_current_user_id(webhook_url)
    if not current_user_id:
        return {"result": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."}

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
    director_ids = []
    if directors:
        director_ids = find_user_ids_by_names(webhook_url, directors)
        if not director_ids:
            return {"result": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π."}
    else:
        director_ids = [current_user_id]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    team_ids = []
    if team:
        team_ids = find_user_ids_by_names(webhook_url, team)
        if not team_ids:
            return {"result": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã."}

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
    fields = {
        "NAME": project_name,
        "VISIBLE": "Y",
        "OPENED": "Y",
        "CLOSED": "N",
        "SUBJECT_ID": 1,  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        "KEYWORDS": "",
        "DESCRIPTION": "",
        "PROJECT": "Y",
        "IS_EXTRANET": "N",
        "OWNER_ID": current_user_id,
        "MEMBERS": director_ids + team_ids
    }

    project_result = create_b24_project(webhook_url, fields)
    project_id = project_result[0]
    project_link = project_result[1]
    
    if project_id and project_link:
        success_message = f"‚úÖ –ü—Ä–æ–µ–∫—Ç ¬´{project_name}¬ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\\n\\nüîó –°—Å—ã–ª–∫–∞: {project_link}"
        return {"result": "success", "message": success_message}
    else:
        return {"result": "error", "message": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –≤ Bitrix24."}

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã NextBot ---
# –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —ç—Ç–æ—Ç —Ñ–∞–π–ª –∏ –æ–∂–∏–¥–∞–µ—Ç –Ω–∞–π—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π `result`.
result = main(args)
